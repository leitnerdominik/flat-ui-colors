{"version":3,"sources":["components/FeedbackMessage/FeedbackMessage.module.css","components/ColorField/ColorField.module.css","components/ColorField/ColorField.js","components/FeedbackMessage/FeedbackMessage.js","utils/colorPalette.js","App.js","serviceWorker.js","index.js","assets/sounds/alert.mp3"],"names":["module","exports","Container","MessageContainer","Message","transparentText","Color","Btn","colorField","_ref","color","clicked","react_default","a","createElement","lib","text","onCopy","console","log","style","background","concat","onClick","className","classes","feedbackMessage","messages","randomMessageIndex","Math","floor","random","length","colors","App","state","fields","colorFields","feedback","_this2","this","_loop","i","push","ColorField","key","showFeedbackMessage","setState","index","_this3","audio","Audio","alarm","FeedbackMessage","play","setTimeout","pause","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","__webpack_require__","p"],"mappings":"2EACAA,EAAAC,QAAA,CAAkBC,UAAA,mCAAAC,iBAAA,0CAAAC,QAAA,iCAAAC,gBAAA,yCAAAC,MAAA,4GCAlBN,EAAAC,QAAA,CAAkBC,UAAA,8BAAAK,IAAA,8LCwBHC,EApBI,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,MAAOC,EAAcF,EAAdE,QAC3B,OACEC,EAAAC,EAAAC,cAACC,EAAA,gBAAD,CACAC,KAAMN,EACNO,OAAQ,kBAAMC,QAAQC,IAAI,UAAWT,KAErCE,EAAAC,EAAAC,cAAA,OACEM,MAAO,CACLC,WAAU,GAAAC,OAAKZ,IAEjBa,QAASZ,EACTa,UAAWC,IAAQvB,WAEnBU,EAAAC,EAAAC,cAAA,UAAQU,UAAWC,IAAQlB,KAA3B,QACAK,EAAAC,EAAAC,cAAA,YAAOJ,sBCEEgB,EAlBS,SAAAjB,GAAa,IAAXC,EAAWD,EAAXC,MAEhBiB,EAAW,CAAC,gBAAiB,gBAAiB,YAAa,WAE3DC,EAAqBC,KAAKC,MAAMD,KAAKE,SAAWJ,EAASK,QAE/D,OACIpB,EAAAC,EAAAC,cAAA,OAAKM,MAAO,CACRC,WAAU,GAAAC,OAAKZ,IAChBc,UAAWC,IAAQvB,WAClBU,EAAAC,EAAAC,cAAA,OAAKU,UAAWC,IAAQtB,kBACxBS,EAAAC,EAAAC,cAAA,QAAMU,UAAWC,IAAQrB,SAAUuB,EAASC,KAE5ChB,EAAAC,EAAAC,cAAA,QAAMU,UAAWC,IAAQnB,OAAQI,KChBhCuB,EAAS,CAClB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,2BCgCWC,oNAzCbC,MAAQ,CACNC,OAAQ,GACRC,YAAa,GACbC,SAAU,yFAKV,IAFkB,IAAAC,EAAAC,KACZH,EAAc,GADFI,EAAA,SAETC,GACPL,EAAYM,KACV/B,EAAAC,EAAAC,cAAC8B,EAAD,CACEC,IAAKH,EACL/B,QAAS,kBAAM4B,EAAKO,oBAAoBJ,IACxChC,MAAOuB,EAAOS,OALXA,EAAI,EAAGA,EAAIF,KAAKL,MAAMC,OAAQM,IAAKD,EAAnCC,GASTF,KAAKO,SAAS,CAAEV,4DAGEW,GAAO,IAAAC,EAAAT,KACnBU,EAAQ,IAAIC,MAAMC,KAClBd,EAAW1B,EAAAC,EAAAC,cAACuC,EAAD,CAAiB3C,MAAOuB,EAAOe,KAChDR,KAAKO,SAAS,CAAET,aAChBY,EAAMI,OACNC,WAAW,WACTL,EAAMM,QACNP,EAAKF,SAAS,CAAET,SAAU,QACzB,sCAIH,OACE1B,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACZgB,KAAKL,MAAME,YACXG,KAAKL,MAAMG,iBApCFmB,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBzE,EAAAC,QAAiByE,EAAAC,EAAuB","file":"static/js/main.4f496e2c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"FeedbackMessage_Container__DP6ei\",\"MessageContainer\":\"FeedbackMessage_MessageContainer__3avUk\",\"Message\":\"FeedbackMessage_Message__11Uze\",\"transparentText\":\"FeedbackMessage_transparentText__1-1G9\",\"Color\":\"FeedbackMessage_Color__2n49H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ColorField_Container__2EXjV\",\"Btn\":\"ColorField_Btn__2advm\"};","import React from \"react\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nimport classes from \"./ColorField.module.css\";\r\n\r\nconst colorField = ({ color, clicked }) => {\r\n  return (\r\n    <CopyToClipboard\r\n    text={color}\r\n    onCopy={() => console.log(\"COPIED \", color)}\r\n  >\r\n    <div\r\n      style={{\r\n        background: `${color}`\r\n      }}\r\n      onClick={clicked}\r\n      className={classes.Container}\r\n    >\r\n      <button className={classes.Btn}>COPY</button>\r\n      <span>{color}</span>\r\n    </div>\r\n    </CopyToClipboard>\r\n  );\r\n};\r\n\r\nexport default colorField;\r\n","import React from \"react\";\r\nimport classes from \"./FeedbackMessage.module.css\";\r\n\r\nconst feedbackMessage = ({color}) => {\r\n\r\n    const messages = [\"It will rock!\", \"Great choice!\", \"Paste me!\", \"Copied!\"];\r\n\r\n    const randomMessageIndex = Math.floor(Math.random() * messages.length);\r\n\r\n    return (\r\n        <div style={{\r\n            background: `${color}`\r\n        }} className={classes.Container}>\r\n            <div className={classes.MessageContainer}>\r\n            <span className={classes.Message}>{messages[randomMessageIndex]}</span>\r\n            </div>\r\n            <span className={classes.Color}>{color}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default feedbackMessage;","export const colors = [\r\n    \"#55efc4\",\r\n    \"#81ecec\",\r\n    \"#74b9ff\",\r\n    \"#a29bfe\",\r\n    \"#dfe6e9\",\r\n    \"#00b894\",\r\n    \"#00cec9\",\r\n    \"#0984e3\",\r\n    \"#6c5ce7\",\r\n    \"#b2bec3\",\r\n    \"#ffeaa7\",\r\n    \"#fab1a0\",\r\n    \"#ff7675\",\r\n    \"#fd79a8\",\r\n    \"#636e72\",\r\n    \"#fdcb6e\",\r\n    \"#e17055\",\r\n    \"#d63031\",\r\n    \"#e84393\",\r\n    \"#2d3436\",\r\n];","import React, { Component } from \"react\";\n\nimport ColorField from \"./components/ColorField/ColorField\";\nimport FeedbackMessage from \"./components/FeedbackMessage/FeedbackMessage\";\nimport { colors } from \"./utils/colorPalette\";\n\nimport alarm from './assets/sounds/alert.mp3';\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    fields: 20,\n    colorFields: [],\n    feedback: null,\n  };\n\n  componentDidMount() {\n    const colorFields = [];\n    for (let i = 0; i < this.state.fields; i++) {\n      colorFields.push(\n        <ColorField\n          key={i}\n          clicked={() => this.showFeedbackMessage(i)}\n          color={colors[i]}\n        />\n      );\n    }\n    this.setState({ colorFields });\n  }\n\n  showFeedbackMessage(index) {\n    const audio = new Audio(alarm);\n    const feedback = <FeedbackMessage color={colors[index]} />;\n    this.setState({ feedback });\n    audio.play();\n    setTimeout(() => {\n      audio.pause();\n      this.setState({ feedback: null });\n    }, 1000);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.colorFields}\n        {this.state.feedback}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/alert.d3b3ccc5.mp3\";"],"sourceRoot":""}