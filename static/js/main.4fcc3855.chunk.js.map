{"version":3,"sources":["components/Navigation/Navigation.module.css","assets/sounds/alert.mp3","components/FeedbackMessage/FeedbackMessage.module.css","components/ColorField/ColorField.js","components/FeedbackMessage/FeedbackMessage.js","components/Navigation/Navigation.js","utils/colorPalette.js","App.js","serviceWorker.js","index.js","components/ColorField/ColorField.module.css"],"names":["module","exports","DropdownContainer","Select","Dropdown","Title","Volume","__webpack_require__","p","Container","MessageContainer","Message","transparentText","Color","colorField","_ref","copyText","color","clicked","react_default","a","createElement","lib","text","onCopy","console","log","style","background","concat","onClick","className","classes","Btn","feedbackMessage","messages","randomMessageIndex","Math","floor","random","length","navigation","changed","toggleSound","volumeClass","soundOn","onChange","value","COLORS","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","showFeedback","copyFormat","colors","fields","colorFields","feedback","_this2","_loop","i","push","ColorField","key","showFeedbackMessage","index","_this3","FeedbackMessage","setState","audio","Audio","alarm","play","setTimeout","pause","event","target","calcColor","rgba","arguments","undefined","map","hex","slice","bigint","parseInt","g","b","hexColors","rgbColors","hexToRgb","rgbaColors","prevState","createColorFields","Navigation","changeCopyFormat","bind","toggleSoundHandler","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fcc3855.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"DropdownContainer\":\"Navigation_DropdownContainer__3G6X4\",\"Select\":\"Navigation_Select__3jrf8\",\"Dropdown\":\"Navigation_Dropdown__mWfRY\",\"Title\":\"Navigation_Title__O20IT\",\"Volume\":\"Navigation_Volume__3s8rU\"};","module.exports = __webpack_public_path__ + \"static/media/alert.d3b3ccc5.mp3\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"FeedbackMessage_Container__DP6ei\",\"MessageContainer\":\"FeedbackMessage_MessageContainer__3avUk\",\"Message\":\"FeedbackMessage_Message__11Uze\",\"transparentText\":\"FeedbackMessage_transparentText__1-1G9\",\"Color\":\"FeedbackMessage_Color__2n49H\"};","import React from \"react\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nimport classes from \"./ColorField.module.css\";\r\n\r\nconst colorField = ({ copyText, color, clicked }) => {\r\n  return (\r\n    <CopyToClipboard\r\n    text={copyText}\r\n    onCopy={() => console.log(\"COPIED \", color)}\r\n  >\r\n    <div\r\n      style={{\r\n        background: `${color}`\r\n      }}\r\n      onClick={clicked}\r\n      className={classes.Container}\r\n    >\r\n      <button className={classes.Btn}>COPY</button>\r\n      <span>{copyText}</span>\r\n    </div>\r\n    </CopyToClipboard>\r\n  );\r\n};\r\n\r\nexport default colorField;\r\n","import React from \"react\";\r\nimport classes from \"./FeedbackMessage.module.css\";\r\n\r\nconst feedbackMessage = ({color, copyText}) => {\r\n\r\n    const messages = [\"It will rock!\", \"Great choice!\", \"Paste me!\", \"Copied!\"];\r\n\r\n    const randomMessageIndex = Math.floor(Math.random() * messages.length);\r\n\r\n    return (\r\n        <div style={{\r\n            background: `${color}`\r\n        }} className={classes.Container}>\r\n            <div className={classes.MessageContainer}>\r\n            <span className={classes.Message}>{messages[randomMessageIndex]}</span>\r\n            </div>\r\n            <span className={classes.Color}>{copyText}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default feedbackMessage;","import React from \"react\";\r\nimport classes from \"./Navigation.module.css\";\r\n\r\nconst navigation = ({ changed, toggleSound, soundOn }) => {\r\n  let volumeClass = \"fas fa-volume-up fa-lg\";\r\n  if (!soundOn) {\r\n    volumeClass = \"fas fa-volume-mute fa-lg\";\r\n  }\r\n\r\n  return (\r\n    <div className={classes.DropdownContainer}>\r\n      <h3 className={classes.Title}>Copy Format: </h3>\r\n      <div className={classes.Dropdown}>\r\n        <select className={classes.Select} onChange={changed}>\r\n          <option value=\"hex-hash\">HEX(#AB11FF)</option>\r\n          <option value=\"hex\">HEX(AB11FF)</option>\r\n          <option value=\"rgb\">RGB(240, 255, 0)</option>\r\n          <option value=\"rgba\">RGBA(240, 255, 0, 0.3)</option>\r\n        </select>\r\n      </div>\r\n      <div className={classes.Volume} onClick={toggleSound}>\r\n        <i className={volumeClass} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default navigation;\r\n","export const COLORS = [\r\n    \"#55efc4\",\r\n    \"#81ecec\",\r\n    \"#74b9ff\",\r\n    \"#a29bfe\",\r\n    \"#dfe6e9\",\r\n    \"#00b894\",\r\n    \"#00cec9\",\r\n    \"#0984e3\",\r\n    \"#6c5ce7\",\r\n    \"#b2bec3\",\r\n    \"#ffeaa7\",\r\n    \"#fab1a0\",\r\n    \"#ff7675\",\r\n    \"#fd79a8\",\r\n    \"#636e72\",\r\n    \"#fdcb6e\",\r\n    \"#e17055\",\r\n    \"#d63031\",\r\n    \"#e84393\",\r\n    \"#2d3436\",\r\n];","import React, { Component } from \"react\";\n\nimport ColorField from \"./components/ColorField/ColorField\";\nimport FeedbackMessage from \"./components/FeedbackMessage/FeedbackMessage\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport { COLORS } from \"./utils/colorPalette\";\n\nimport alarm from \"./assets/sounds/alert.mp3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showFeedback: false,\n      copyFormat: \"hex-hash\",\n      colors: COLORS,\n      soundOn: true\n    };\n\n    this.fields = 20;\n    this.colorFields = [];\n    this.feedback = null;\n  }\n\n  createColorFields() {\n    const colorFields = [];\n    for (let i = 0; i < this.fields; i++) {\n      colorFields.push(\n        <ColorField\n          key={i}\n          clicked={() => this.showFeedbackMessage(i)}\n          copyText={this.state.colors[i]}\n          color={COLORS[i]}\n        />\n      );\n    }\n    return colorFields;\n  }\n\n  showFeedbackMessage(index) {\n    const feedback = (\n      <FeedbackMessage\n        copyText={this.state.colors[index]}\n        color={COLORS[index]}\n      />\n    );\n    this.setState({ showFeedback: true });\n    this.feedback = feedback;\n\n    const audio = new Audio(alarm);\n    if (this.state.soundOn) {\n      audio.play();\n    }\n\n    setTimeout(() => {\n      audio.pause();\n      this.setState({ showFeedback: false });\n    }, 1000);\n  }\n\n  changeCopyFormat(event) {\n    this.setState({ copyFormat: event.target.value }, this.calcColor);\n  }\n\n  hexToRgb(colors, rgba = false) {\n    const convertedColors = colors.map(color => {\n      const hex = color.slice(1, color.length);\n      const bigint = parseInt(hex, 16);\n      const r = (bigint >> 16) & 255;\n      const g = (bigint >> 8) & 255;\n      const b = bigint & 255;\n      let a = \"\";\n      if (rgba) {\n        a = \", 1.0\";\n      }\n\n      return `rgb(${r}, ${g}, ${b}${a})`;\n    });\n\n    return convertedColors;\n  }\n\n  calcColor() {\n    switch (this.state.copyFormat) {\n      case \"hex\":\n        const hexColors = COLORS.map(color => color.slice(1, color.length));\n        this.setState({ colors: hexColors });\n        break;\n      case \"rgb\":\n        const rgbColors = this.hexToRgb(COLORS);\n        this.setState({ colors: rgbColors });\n        break;\n      case \"rgba\":\n        const rgbaColors = this.hexToRgb(COLORS, true);\n        this.setState({ colors: rgbaColors });\n        break;\n      default:\n        this.setState({ colors: COLORS });\n    }\n  }\n\n  toggleSoundHandler() {\n    this.setState(prevState => ({ soundOn: !prevState.soundOn }));\n  }\n\n  render() {\n    if (!this.state.showFeedback) {\n      this.feedback = null;\n    }\n\n    const colorFields = this.createColorFields();\n    return (\n      <div className=\"App\">\n        <Navigation\n          changed={this.changeCopyFormat.bind(this)}\n          toggleSound={this.toggleSoundHandler.bind(this)}\n          soundOn={this.state.soundOn}\n        />\n        <div className=\"ColorsContainer\">\n          {colorFields}\n          {this.feedback}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ColorField_Container__2EXjV\",\"Btn\":\"ColorField_Btn__2advm\"};"],"sourceRoot":""}